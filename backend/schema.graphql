# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type about {
  id: ID!
  route: String
  title: String
  description: String
  link: String
}

input aboutWhereUniqueInput {
  id: ID
}

input aboutWhereInput {
  AND: [aboutWhereInput!]
  OR: [aboutWhereInput!]
  NOT: [aboutWhereInput!]
  id: IDFilter
  route: StringFilter
  title: StringFilter
  description: StringFilter
  link: StringFilter
}

input aboutOrderByInput {
  id: OrderDirection
  route: OrderDirection
  title: OrderDirection
  description: OrderDirection
  link: OrderDirection
}

input aboutUpdateInput {
  route: String
  title: String
  description: String
  link: String
}

input aboutUpdateArgs {
  where: aboutWhereUniqueInput!
  data: aboutUpdateInput!
}

input aboutCreateInput {
  route: String
  title: String
  description: String
  link: String
}

type conferenceTheme {
  id: ID!
  title: String
}

input conferenceThemeWhereUniqueInput {
  id: ID
}

input conferenceThemeWhereInput {
  AND: [conferenceThemeWhereInput!]
  OR: [conferenceThemeWhereInput!]
  NOT: [conferenceThemeWhereInput!]
  id: IDFilter
  title: StringFilter
}

input conferenceThemeOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input conferenceThemeUpdateInput {
  title: String
}

input conferenceThemeUpdateArgs {
  where: conferenceThemeWhereUniqueInput!
  data: conferenceThemeUpdateInput!
}

input conferenceThemeCreateInput {
  title: String
}

type organizingCommittee {
  id: ID!
  name: String
  category: String
  designation: String
  dept: String
  desc: String
  photoUrl: String
}

input organizingCommitteeWhereUniqueInput {
  id: ID
}

input organizingCommitteeWhereInput {
  AND: [organizingCommitteeWhereInput!]
  OR: [organizingCommitteeWhereInput!]
  NOT: [organizingCommitteeWhereInput!]
  id: IDFilter
  name: StringFilter
  category: StringNullableFilter
  designation: StringFilter
  dept: StringFilter
  desc: StringFilter
  photoUrl: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input organizingCommitteeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  category: OrderDirection
  designation: OrderDirection
  dept: OrderDirection
  desc: OrderDirection
  photoUrl: OrderDirection
}

input organizingCommitteeUpdateInput {
  name: String
  category: String
  designation: String
  dept: String
  desc: String
  photoUrl: String
}

input organizingCommitteeUpdateArgs {
  where: organizingCommitteeWhereUniqueInput!
  data: organizingCommitteeUpdateInput!
}

input organizingCommitteeCreateInput {
  name: String
  category: String
  designation: String
  dept: String
  desc: String
  photoUrl: String
}

type technicalCommittee {
  id: ID!
  name: String
  designation: String
  dept: String
  institute: String
}

input technicalCommitteeWhereUniqueInput {
  id: ID
}

input technicalCommitteeWhereInput {
  AND: [technicalCommitteeWhereInput!]
  OR: [technicalCommitteeWhereInput!]
  NOT: [technicalCommitteeWhereInput!]
  id: IDFilter
  name: StringFilter
  designation: StringFilter
  dept: StringFilter
  institute: StringFilter
}

input technicalCommitteeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  designation: OrderDirection
  dept: OrderDirection
  institute: OrderDirection
}

input technicalCommitteeUpdateInput {
  name: String
  designation: String
  dept: String
  institute: String
}

input technicalCommitteeUpdateArgs {
  where: technicalCommitteeWhereUniqueInput!
  data: technicalCommitteeUpdateInput!
}

input technicalCommitteeCreateInput {
  name: String
  designation: String
  dept: String
  institute: String
}

type sponsorship {
  id: ID!
  type: String
  amount: Int
  delegates: Int
  stallarea: Int
  backdropBanner: Boolean
  presentationSlot: Boolean
  addvertisement: String
}

input sponsorshipWhereUniqueInput {
  id: ID
}

input sponsorshipWhereInput {
  AND: [sponsorshipWhereInput!]
  OR: [sponsorshipWhereInput!]
  NOT: [sponsorshipWhereInput!]
  id: IDFilter
  type: StringFilter
  amount: IntFilter
  delegates: IntFilter
  stallarea: IntFilter
  backdropBanner: BooleanFilter
  presentationSlot: BooleanFilter
  addvertisement: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input sponsorshipOrderByInput {
  id: OrderDirection
  type: OrderDirection
  amount: OrderDirection
  delegates: OrderDirection
  stallarea: OrderDirection
  backdropBanner: OrderDirection
  presentationSlot: OrderDirection
  addvertisement: OrderDirection
}

input sponsorshipUpdateInput {
  type: String
  amount: Int
  delegates: Int
  stallarea: Int
  backdropBanner: Boolean
  presentationSlot: Boolean
  addvertisement: String
}

input sponsorshipUpdateArgs {
  where: sponsorshipWhereUniqueInput!
  data: sponsorshipUpdateInput!
}

input sponsorshipCreateInput {
  type: String
  amount: Int
  delegates: Int
  stallarea: Int
  backdropBanner: Boolean
  presentationSlot: Boolean
  addvertisement: String
}

type importantDate {
  id: ID!
  event: String
  date: String
  description: String
  important: Boolean
}

input importantDateWhereUniqueInput {
  id: ID
}

input importantDateWhereInput {
  AND: [importantDateWhereInput!]
  OR: [importantDateWhereInput!]
  NOT: [importantDateWhereInput!]
  id: IDFilter
  event: StringFilter
  date: StringFilter
  description: StringFilter
  important: BooleanFilter
}

input importantDateOrderByInput {
  id: OrderDirection
  event: OrderDirection
  date: OrderDirection
  description: OrderDirection
  important: OrderDirection
}

input importantDateUpdateInput {
  event: String
  date: String
  description: String
  important: Boolean
}

input importantDateUpdateArgs {
  where: importantDateWhereUniqueInput!
  data: importantDateUpdateInput!
}

input importantDateCreateInput {
  event: String
  date: String
  description: String
  important: Boolean
}

type registrationDetail {
  id: ID!
  native: String
  particulars: String
  amt_early_bird: Int
  amt_regular: Int
}

input registrationDetailWhereUniqueInput {
  id: ID
}

input registrationDetailWhereInput {
  AND: [registrationDetailWhereInput!]
  OR: [registrationDetailWhereInput!]
  NOT: [registrationDetailWhereInput!]
  id: IDFilter
  native: StringNullableFilter
  particulars: StringFilter
  amt_early_bird: IntFilter
  amt_regular: IntFilter
}

input registrationDetailOrderByInput {
  id: OrderDirection
  native: OrderDirection
  particulars: OrderDirection
  amt_early_bird: OrderDirection
  amt_regular: OrderDirection
}

input registrationDetailUpdateInput {
  native: String
  particulars: String
  amt_early_bird: Int
  amt_regular: Int
}

input registrationDetailUpdateArgs {
  where: registrationDetailWhereUniqueInput!
  data: registrationDetailUpdateInput!
}

input registrationDetailCreateInput {
  native: String
  particulars: String
  amt_early_bird: Int
  amt_regular: Int
}

type speaker {
  id: ID!
  type: String
  name: String
  designation: String
  title: String
  bio: String
  photoUrl: String
}

input speakerWhereUniqueInput {
  id: ID
}

input speakerWhereInput {
  AND: [speakerWhereInput!]
  OR: [speakerWhereInput!]
  NOT: [speakerWhereInput!]
  id: IDFilter
  type: StringFilter
  name: StringFilter
  designation: StringFilter
  title: StringFilter
  bio: StringFilter
  photoUrl: StringFilter
}

input speakerOrderByInput {
  id: OrderDirection
  type: OrderDirection
  name: OrderDirection
  designation: OrderDirection
  title: OrderDirection
  bio: OrderDirection
  photoUrl: OrderDirection
}

input speakerUpdateInput {
  type: String
  name: String
  designation: String
  title: String
  bio: String
  photoUrl: String
}

input speakerUpdateArgs {
  where: speakerWhereUniqueInput!
  data: speakerUpdateInput!
}

input speakerCreateInput {
  type: String
  name: String
  designation: String
  title: String
  bio: String
  photoUrl: String
}

type toursit {
  id: ID!
  name: String
  location: String
  photoUrl: String
  desc: String
}

input toursitWhereUniqueInput {
  id: ID
}

input toursitWhereInput {
  AND: [toursitWhereInput!]
  OR: [toursitWhereInput!]
  NOT: [toursitWhereInput!]
  id: IDFilter
  name: StringFilter
  location: StringFilter
  photoUrl: StringFilter
  desc: StringFilter
}

input toursitOrderByInput {
  id: OrderDirection
  name: OrderDirection
  location: OrderDirection
  photoUrl: OrderDirection
  desc: OrderDirection
}

input toursitUpdateInput {
  name: String
  location: String
  photoUrl: String
  desc: String
}

input toursitUpdateArgs {
  where: toursitWhereUniqueInput!
  data: toursitUpdateInput!
}

input toursitCreateInput {
  name: String
  location: String
  photoUrl: String
  desc: String
}

type track {
  id: ID!
  number: Int
  type: String
  name: String
}

input trackWhereUniqueInput {
  id: ID
}

input trackWhereInput {
  AND: [trackWhereInput!]
  OR: [trackWhereInput!]
  NOT: [trackWhereInput!]
  id: IDFilter
  number: IntFilter
  type: StringFilter
  name: StringFilter
}

input trackOrderByInput {
  id: OrderDirection
  number: OrderDirection
  type: OrderDirection
  name: OrderDirection
}

input trackUpdateInput {
  number: Int
  type: String
  name: String
}

input trackUpdateArgs {
  where: trackWhereUniqueInput!
  data: trackUpdateInput!
}

input trackCreateInput {
  number: Int
  type: String
  name: String
}

type eventDetail {
  id: ID!
  name: String
  desc: String
  photoUrl: String
  link: String
}

input eventDetailWhereUniqueInput {
  id: ID
}

input eventDetailWhereInput {
  AND: [eventDetailWhereInput!]
  OR: [eventDetailWhereInput!]
  NOT: [eventDetailWhereInput!]
  id: IDFilter
  name: StringFilter
  desc: StringFilter
  photoUrl: StringFilter
  link: StringFilter
}

input eventDetailOrderByInput {
  id: OrderDirection
  name: OrderDirection
  desc: OrderDirection
  photoUrl: OrderDirection
  link: OrderDirection
}

input eventDetailUpdateInput {
  name: String
  desc: String
  photoUrl: String
  link: String
}

input eventDetailUpdateArgs {
  where: eventDetailWhereUniqueInput!
  data: eventDetailUpdateInput!
}

input eventDetailCreateInput {
  name: String
  desc: String
  photoUrl: String
  link: String
}

type generalInformation {
  id: ID!
  name: String
  desc: String
}

input generalInformationWhereUniqueInput {
  id: ID
}

input generalInformationWhereInput {
  AND: [generalInformationWhereInput!]
  OR: [generalInformationWhereInput!]
  NOT: [generalInformationWhereInput!]
  id: IDFilter
  name: StringFilter
  desc: StringFilter
}

input generalInformationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  desc: OrderDirection
}

input generalInformationUpdateInput {
  name: String
  desc: String
}

input generalInformationUpdateArgs {
  where: generalInformationWhereUniqueInput!
  data: generalInformationUpdateInput!
}

input generalInformationCreateInput {
  name: String
  desc: String
}

type subtheme {
  id: ID!
  number: Int
  desc: String
}

input subthemeWhereUniqueInput {
  id: ID
}

input subthemeWhereInput {
  AND: [subthemeWhereInput!]
  OR: [subthemeWhereInput!]
  NOT: [subthemeWhereInput!]
  id: IDFilter
  number: IntFilter
  desc: StringFilter
}

input subthemeOrderByInput {
  id: OrderDirection
  number: OrderDirection
  desc: OrderDirection
}

input subthemeUpdateInput {
  number: Int
  desc: String
}

input subthemeUpdateArgs {
  where: subthemeWhereUniqueInput!
  data: subthemeUpdateInput!
}

input subthemeCreateInput {
  number: Int
  desc: String
}

type notice {
  id: ID!
  title: String
  date: String
  isNew: Boolean
  createdAt: DateTime
}

input noticeWhereUniqueInput {
  id: ID
}

input noticeWhereInput {
  AND: [noticeWhereInput!]
  OR: [noticeWhereInput!]
  NOT: [noticeWhereInput!]
  id: IDFilter
  title: StringFilter
  date: StringFilter
  isNew: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input noticeOrderByInput {
  id: OrderDirection
  title: OrderDirection
  date: OrderDirection
  isNew: OrderDirection
  createdAt: OrderDirection
}

input noticeUpdateInput {
  title: String
  date: String
  isNew: Boolean
  createdAt: DateTime
}

input noticeUpdateArgs {
  where: noticeWhereUniqueInput!
  data: noticeUpdateInput!
}

input noticeCreateInput {
  title: String
  date: String
  isNew: Boolean
  createdAt: DateTime
}

type publication {
  id: ID!
  name: String
  desc: String
  photoUrl: String
  linkname: String
  link: String
}

input publicationWhereUniqueInput {
  id: ID
}

input publicationWhereInput {
  AND: [publicationWhereInput!]
  OR: [publicationWhereInput!]
  NOT: [publicationWhereInput!]
  id: IDFilter
  name: StringFilter
  desc: StringFilter
  photoUrl: StringFilter
  linkname: StringFilter
  link: StringFilter
}

input publicationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  desc: OrderDirection
  photoUrl: OrderDirection
  linkname: OrderDirection
  link: OrderDirection
}

input publicationUpdateInput {
  name: String
  desc: String
  photoUrl: String
  linkname: String
  link: String
}

input publicationUpdateArgs {
  where: publicationWhereUniqueInput!
  data: publicationUpdateInput!
}

input publicationCreateInput {
  name: String
  desc: String
  photoUrl: String
  linkname: String
  link: String
}

type homeimage {
  id: ID!
  name: String
  photoUrl: String
  detail: Boolean
}

input homeimageWhereUniqueInput {
  id: ID
}

input homeimageWhereInput {
  AND: [homeimageWhereInput!]
  OR: [homeimageWhereInput!]
  NOT: [homeimageWhereInput!]
  id: IDFilter
  name: StringFilter
  photoUrl: StringFilter
  detail: BooleanFilter
}

input homeimageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  photoUrl: OrderDirection
  detail: OrderDirection
}

input homeimageUpdateInput {
  name: String
  photoUrl: String
  detail: Boolean
}

input homeimageUpdateArgs {
  where: homeimageWhereUniqueInput!
  data: homeimageUpdateInput!
}

input homeimageCreateInput {
  name: String
  photoUrl: String
  detail: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createabout(data: aboutCreateInput!): about
  createAbouts(data: [aboutCreateInput!]!): [about]
  updateabout(where: aboutWhereUniqueInput!, data: aboutUpdateInput!): about
  updateAbouts(data: [aboutUpdateArgs!]!): [about]
  deleteabout(where: aboutWhereUniqueInput!): about
  deleteAbouts(where: [aboutWhereUniqueInput!]!): [about]
  createconferenceTheme(data: conferenceThemeCreateInput!): conferenceTheme
  createConferenceThemes(data: [conferenceThemeCreateInput!]!): [conferenceTheme]
  updateconferenceTheme(where: conferenceThemeWhereUniqueInput!, data: conferenceThemeUpdateInput!): conferenceTheme
  updateConferenceThemes(data: [conferenceThemeUpdateArgs!]!): [conferenceTheme]
  deleteconferenceTheme(where: conferenceThemeWhereUniqueInput!): conferenceTheme
  deleteConferenceThemes(where: [conferenceThemeWhereUniqueInput!]!): [conferenceTheme]
  createorganizingCommittee(data: organizingCommitteeCreateInput!): organizingCommittee
  createOrganizingCommittees(data: [organizingCommitteeCreateInput!]!): [organizingCommittee]
  updateorganizingCommittee(where: organizingCommitteeWhereUniqueInput!, data: organizingCommitteeUpdateInput!): organizingCommittee
  updateOrganizingCommittees(data: [organizingCommitteeUpdateArgs!]!): [organizingCommittee]
  deleteorganizingCommittee(where: organizingCommitteeWhereUniqueInput!): organizingCommittee
  deleteOrganizingCommittees(where: [organizingCommitteeWhereUniqueInput!]!): [organizingCommittee]
  createtechnicalCommittee(data: technicalCommitteeCreateInput!): technicalCommittee
  createTechnicalCommittees(data: [technicalCommitteeCreateInput!]!): [technicalCommittee]
  updatetechnicalCommittee(where: technicalCommitteeWhereUniqueInput!, data: technicalCommitteeUpdateInput!): technicalCommittee
  updateTechnicalCommittees(data: [technicalCommitteeUpdateArgs!]!): [technicalCommittee]
  deletetechnicalCommittee(where: technicalCommitteeWhereUniqueInput!): technicalCommittee
  deleteTechnicalCommittees(where: [technicalCommitteeWhereUniqueInput!]!): [technicalCommittee]
  createsponsorship(data: sponsorshipCreateInput!): sponsorship
  createSponsorships(data: [sponsorshipCreateInput!]!): [sponsorship]
  updatesponsorship(where: sponsorshipWhereUniqueInput!, data: sponsorshipUpdateInput!): sponsorship
  updateSponsorships(data: [sponsorshipUpdateArgs!]!): [sponsorship]
  deletesponsorship(where: sponsorshipWhereUniqueInput!): sponsorship
  deleteSponsorships(where: [sponsorshipWhereUniqueInput!]!): [sponsorship]
  createimportantDate(data: importantDateCreateInput!): importantDate
  createImportantDates(data: [importantDateCreateInput!]!): [importantDate]
  updateimportantDate(where: importantDateWhereUniqueInput!, data: importantDateUpdateInput!): importantDate
  updateImportantDates(data: [importantDateUpdateArgs!]!): [importantDate]
  deleteimportantDate(where: importantDateWhereUniqueInput!): importantDate
  deleteImportantDates(where: [importantDateWhereUniqueInput!]!): [importantDate]
  createregistrationDetail(data: registrationDetailCreateInput!): registrationDetail
  createRegistrationDetails(data: [registrationDetailCreateInput!]!): [registrationDetail]
  updateregistrationDetail(where: registrationDetailWhereUniqueInput!, data: registrationDetailUpdateInput!): registrationDetail
  updateRegistrationDetails(data: [registrationDetailUpdateArgs!]!): [registrationDetail]
  deleteregistrationDetail(where: registrationDetailWhereUniqueInput!): registrationDetail
  deleteRegistrationDetails(where: [registrationDetailWhereUniqueInput!]!): [registrationDetail]
  createspeaker(data: speakerCreateInput!): speaker
  createSpeakers(data: [speakerCreateInput!]!): [speaker]
  updatespeaker(where: speakerWhereUniqueInput!, data: speakerUpdateInput!): speaker
  updateSpeakers(data: [speakerUpdateArgs!]!): [speaker]
  deletespeaker(where: speakerWhereUniqueInput!): speaker
  deleteSpeakers(where: [speakerWhereUniqueInput!]!): [speaker]
  createtoursit(data: toursitCreateInput!): toursit
  createToursits(data: [toursitCreateInput!]!): [toursit]
  updatetoursit(where: toursitWhereUniqueInput!, data: toursitUpdateInput!): toursit
  updateToursits(data: [toursitUpdateArgs!]!): [toursit]
  deletetoursit(where: toursitWhereUniqueInput!): toursit
  deleteToursits(where: [toursitWhereUniqueInput!]!): [toursit]
  createtrack(data: trackCreateInput!): track
  createTracks(data: [trackCreateInput!]!): [track]
  updatetrack(where: trackWhereUniqueInput!, data: trackUpdateInput!): track
  updateTracks(data: [trackUpdateArgs!]!): [track]
  deletetrack(where: trackWhereUniqueInput!): track
  deleteTracks(where: [trackWhereUniqueInput!]!): [track]
  createeventDetail(data: eventDetailCreateInput!): eventDetail
  createEventDetails(data: [eventDetailCreateInput!]!): [eventDetail]
  updateeventDetail(where: eventDetailWhereUniqueInput!, data: eventDetailUpdateInput!): eventDetail
  updateEventDetails(data: [eventDetailUpdateArgs!]!): [eventDetail]
  deleteeventDetail(where: eventDetailWhereUniqueInput!): eventDetail
  deleteEventDetails(where: [eventDetailWhereUniqueInput!]!): [eventDetail]
  creategeneralInformation(data: generalInformationCreateInput!): generalInformation
  createGeneralInformations(data: [generalInformationCreateInput!]!): [generalInformation]
  updategeneralInformation(where: generalInformationWhereUniqueInput!, data: generalInformationUpdateInput!): generalInformation
  updateGeneralInformations(data: [generalInformationUpdateArgs!]!): [generalInformation]
  deletegeneralInformation(where: generalInformationWhereUniqueInput!): generalInformation
  deleteGeneralInformations(where: [generalInformationWhereUniqueInput!]!): [generalInformation]
  createsubtheme(data: subthemeCreateInput!): subtheme
  createSubthemes(data: [subthemeCreateInput!]!): [subtheme]
  updatesubtheme(where: subthemeWhereUniqueInput!, data: subthemeUpdateInput!): subtheme
  updateSubthemes(data: [subthemeUpdateArgs!]!): [subtheme]
  deletesubtheme(where: subthemeWhereUniqueInput!): subtheme
  deleteSubthemes(where: [subthemeWhereUniqueInput!]!): [subtheme]
  createnotice(data: noticeCreateInput!): notice
  createNotices(data: [noticeCreateInput!]!): [notice]
  updatenotice(where: noticeWhereUniqueInput!, data: noticeUpdateInput!): notice
  updateNotices(data: [noticeUpdateArgs!]!): [notice]
  deletenotice(where: noticeWhereUniqueInput!): notice
  deleteNotices(where: [noticeWhereUniqueInput!]!): [notice]
  createpublication(data: publicationCreateInput!): publication
  createPublications(data: [publicationCreateInput!]!): [publication]
  updatepublication(where: publicationWhereUniqueInput!, data: publicationUpdateInput!): publication
  updatePublications(data: [publicationUpdateArgs!]!): [publication]
  deletepublication(where: publicationWhereUniqueInput!): publication
  deletePublications(where: [publicationWhereUniqueInput!]!): [publication]
  createhomeimage(data: homeimageCreateInput!): homeimage
  createHomeimages(data: [homeimageCreateInput!]!): [homeimage]
  updatehomeimage(where: homeimageWhereUniqueInput!, data: homeimageUpdateInput!): homeimage
  updateHomeimages(data: [homeimageUpdateArgs!]!): [homeimage]
  deletehomeimage(where: homeimageWhereUniqueInput!): homeimage
  deleteHomeimages(where: [homeimageWhereUniqueInput!]!): [homeimage]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  about(where: aboutWhereUniqueInput!): about
  abouts(where: aboutWhereInput! = {}, orderBy: [aboutOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: aboutWhereUniqueInput): [about!]
  aboutsCount(where: aboutWhereInput! = {}): Int
  conferenceTheme(where: conferenceThemeWhereUniqueInput!): conferenceTheme
  conferenceThemes(where: conferenceThemeWhereInput! = {}, orderBy: [conferenceThemeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: conferenceThemeWhereUniqueInput): [conferenceTheme!]
  conferenceThemesCount(where: conferenceThemeWhereInput! = {}): Int
  organizingCommittee(where: organizingCommitteeWhereUniqueInput!): organizingCommittee
  organizingCommittees(where: organizingCommitteeWhereInput! = {}, orderBy: [organizingCommitteeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: organizingCommitteeWhereUniqueInput): [organizingCommittee!]
  organizingCommitteesCount(where: organizingCommitteeWhereInput! = {}): Int
  technicalCommittee(where: technicalCommitteeWhereUniqueInput!): technicalCommittee
  technicalCommittees(where: technicalCommitteeWhereInput! = {}, orderBy: [technicalCommitteeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: technicalCommitteeWhereUniqueInput): [technicalCommittee!]
  technicalCommitteesCount(where: technicalCommitteeWhereInput! = {}): Int
  sponsorship(where: sponsorshipWhereUniqueInput!): sponsorship
  sponsorships(where: sponsorshipWhereInput! = {}, orderBy: [sponsorshipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: sponsorshipWhereUniqueInput): [sponsorship!]
  sponsorshipsCount(where: sponsorshipWhereInput! = {}): Int
  importantDate(where: importantDateWhereUniqueInput!): importantDate
  importantDates(where: importantDateWhereInput! = {}, orderBy: [importantDateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: importantDateWhereUniqueInput): [importantDate!]
  importantDatesCount(where: importantDateWhereInput! = {}): Int
  registrationDetail(where: registrationDetailWhereUniqueInput!): registrationDetail
  registrationDetails(where: registrationDetailWhereInput! = {}, orderBy: [registrationDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: registrationDetailWhereUniqueInput): [registrationDetail!]
  registrationDetailsCount(where: registrationDetailWhereInput! = {}): Int
  speaker(where: speakerWhereUniqueInput!): speaker
  speakers(where: speakerWhereInput! = {}, orderBy: [speakerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: speakerWhereUniqueInput): [speaker!]
  speakersCount(where: speakerWhereInput! = {}): Int
  toursit(where: toursitWhereUniqueInput!): toursit
  toursits(where: toursitWhereInput! = {}, orderBy: [toursitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: toursitWhereUniqueInput): [toursit!]
  toursitsCount(where: toursitWhereInput! = {}): Int
  track(where: trackWhereUniqueInput!): track
  tracks(where: trackWhereInput! = {}, orderBy: [trackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: trackWhereUniqueInput): [track!]
  tracksCount(where: trackWhereInput! = {}): Int
  eventDetail(where: eventDetailWhereUniqueInput!): eventDetail
  eventDetails(where: eventDetailWhereInput! = {}, orderBy: [eventDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: eventDetailWhereUniqueInput): [eventDetail!]
  eventDetailsCount(where: eventDetailWhereInput! = {}): Int
  generalInformation(where: generalInformationWhereUniqueInput!): generalInformation
  generalInformations(where: generalInformationWhereInput! = {}, orderBy: [generalInformationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: generalInformationWhereUniqueInput): [generalInformation!]
  generalInformationsCount(where: generalInformationWhereInput! = {}): Int
  subtheme(where: subthemeWhereUniqueInput!): subtheme
  subthemes(where: subthemeWhereInput! = {}, orderBy: [subthemeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: subthemeWhereUniqueInput): [subtheme!]
  subthemesCount(where: subthemeWhereInput! = {}): Int
  notice(where: noticeWhereUniqueInput!): notice
  notices(where: noticeWhereInput! = {}, orderBy: [noticeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: noticeWhereUniqueInput): [notice!]
  noticesCount(where: noticeWhereInput! = {}): Int
  publication(where: publicationWhereUniqueInput!): publication
  publications(where: publicationWhereInput! = {}, orderBy: [publicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: publicationWhereUniqueInput): [publication!]
  publicationsCount(where: publicationWhereInput! = {}): Int
  homeimage(where: homeimageWhereUniqueInput!): homeimage
  homeimages(where: homeimageWhereInput! = {}, orderBy: [homeimageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: homeimageWhereUniqueInput): [homeimage!]
  homeimagesCount(where: homeimageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
